---
description: 
globs: 
alwaysApply: true
---
# Git Workflow

## Branch Strategy

### Main Branches

- **`main`**: Production-ready code
- **`develop`**: Development integration branch

### Feature Branches

- **`feature/[feature-name]`**: New features
- **`bugfix/[bug-description]`**: Bug fixes
- **`hotfix/[hotfix-description]`**: Critical production fixes

## Workflow Steps

### 1. Starting New Work

```bash
# Switch to develop branch
git checkout develop
git pull origin develop

# Create feature branch
git checkout -b feature/user-authentication

# Or for bug fixes
git checkout -b bugfix/login-validation-error
```

### 2. Development Process

```bash
# Make your changes and commit frequently
git add .
git commit -m "feat: add user authentication logic"

# Push to remote regularly
git push origin feature/user-authentication
```

### 3. Before Pull Request

```bash
# Update your branch with latest develop
git checkout develop
git pull origin develop
git checkout feature/user-authentication
git rebase develop

# Run tests and checks
npm run test
npm run lint
npm run type-check
npm run build

# Fix any issues found
```

### 4. Pull Request Process

1. **Create PR**: Open pull request from feature branch to `develop`
2. **Fill PR Template**: Use the provided template
3. **Request Review**: Assign reviewers
4. **Address Feedback**: Make requested changes
5. **Merge**: Once approved, squash and merge

### 5. Deployment

```bash
# After feature is merged to develop
git checkout main
git pull origin main
git merge develop
git push origin main

# Tag releases
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0
```

## Commit Message Convention

### Format

```
<type>(<scope>): <description>

<body>

<footer>
```

### Types

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation only changes
- **style**: Formatting, missing semicolons, etc.
- **refactor**: Code change that neither fixes a bug nor adds a feature
- **test**: Adding missing tests
- **chore**: Updating build tasks, package manager configs, etc.

### Examples

```bash
feat(auth): add user authentication with Supabase

- Implement login/logout functionality
- Add session management
- Create auth middleware for protected routes

Closes #123
```

```bash
fix(ui): resolve mobile responsive issues in navigation

- Fix hamburger menu not closing on mobile
- Adjust breakpoints for tablet view
- Improve touch targets for better accessibility

Fixes #456
```

## Best Practices

### Commits

- Make atomic commits (one logical change per commit)
- Write clear, descriptive commit messages
- Commit frequently during development
- Don't commit broken code

### Branching

- Keep feature branches short-lived
- Regularly rebase with develop to avoid conflicts
- Delete merged feature branches
- Use descriptive branch names

### Pull Requests

- Keep PRs focused and reviewable (< 400 lines)
- Include tests for new features
- Update documentation when needed
- Add screenshots for UI changes

### Code Review

- Review promptly (within 1 business day)
- Be constructive and specific in feedback
- Test the changes locally when needed
- Approve only when confident in the changes

## Emergency Hotfixes

```bash
# Create hotfix from main
git checkout main
git pull origin main
git checkout -b hotfix/critical-security-fix

# Make minimal changes
# Test thoroughly
# Commit and push

# Merge to both main and develop
git checkout main
git merge hotfix/critical-security-fix
git push origin main

git checkout develop
git merge hotfix/critical-security-fix
git push origin develop

# Delete hotfix branch
git branch -d hotfix/critical-security-fix
git push origin --delete hotfix/critical-security-fix
```

## Useful Git Commands

```bash
# Check current status
git status
git log --oneline -10

# Undo changes
git checkout -- filename  # Undo unstaged changes
git reset HEAD filename    # Unstage files
git reset --soft HEAD~1    # Undo last commit (keep changes)
git reset --hard HEAD~1    # Undo last commit (lose changes)

# Clean up
git branch -d feature-name           # Delete local branch
git push origin --delete feature-name # Delete remote branch
git remote prune origin              # Clean up remote tracking branches

# Interactive rebase (clean up commits before PR)
git rebase -i HEAD~3
```

## Troubleshooting

### Merge Conflicts

```bash
# During rebase/merge
git status  # See conflicted files
# Edit files to resolve conflicts
git add .
git rebase --continue  # or git commit for merge
```

### Accidentally Committed to Wrong Branch

```bash
# If not pushed yet
git reset --soft HEAD~1
git stash
git checkout correct-branch
git stash pop
git add .
git commit -m "your message"
```

### Need to Update Feature Branch

```bash
git checkout develop
git pull origin develop
git checkout feature-branch
git rebase develop
# Resolve any conflicts
git push --force-with-lease origin feature-branch
```
